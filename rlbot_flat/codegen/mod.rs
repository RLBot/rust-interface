use eyre::{ContextCompat, anyhow};
use planus_types::intermediate::{AbsolutePath, Declaration, DeclarationKind};
use std::{
    fs,
    io::Write,
    path::{Path, PathBuf},
    time::Instant,
};

const SCHEMA_DIR: &str = "../flatbuffers-schema/schema";
const OUT_FILE: &str = "./src/planus_flat.rs";

fn get_git_rev(dir: impl AsRef<Path>) -> Option<String> {
    let output = std::process::Command::new("git")
        .current_dir(dir)
        .args(["rev-parse", "--short", "HEAD"])
        .output()
        .ok()?;

    Some(String::from_utf8(output.stdout).ok()?.trim().to_string())
}

pub fn main() -> eyre::Result<()> {
    let start_time = Instant::now();

    if !Path::new(SCHEMA_DIR).exists() {
        Err(anyhow!("Couldn't find flatbuffers schema folder"))?;
    }

    let rlbot_fbs_path = PathBuf::from(SCHEMA_DIR).join("rlbot.fbs");
    let declarations = planus_translation::translate_files(&[rlbot_fbs_path.as_path()])
        .context("planus translation failed")?;

    let generated_planus = // No idea why planus renames RLBot to RlBot but this fixes it
        planus_codegen::generate_rust(&declarations)?.replace("RlBot", "RLBot");

    let generated_custom = generate_custom(declarations.declarations.iter().filter(|x| {
        x.0.0
            .last()
            .map(|s| s.ends_with("InterfaceMessage") || s.ends_with("CoreMessage"))
            .unwrap_or(false)
    }))?;

    let now = Instant::now();
    let time_taken = format!(
        "// @generated by build.rs, took {:?}\n// built from schema {}\n",
        now.duration_since(start_time),
        get_git_rev(SCHEMA_DIR).unwrap_or_else(|| "UNKNOWN".into())
    );

    let raw_out = &[
        time_taken.as_bytes(),
        "////////// CUSTOM GENERATED //////////\n".as_bytes(),
        generated_custom.as_bytes(),
        "////////// PLANUS GENERATED //////////\n".as_bytes(),
        generated_planus.as_bytes(),
    ]
    .concat();

    fs::File::create(OUT_FILE)?.write_all(raw_out)?;

    Ok(())
}

/// Generate From<EnumVariant> for enum types.
fn generate_custom<'a>(
    enum_decls: impl IntoIterator<Item = (&'a AbsolutePath, &'a Declaration)>,
) -> eyre::Result<String> {
    let mut output = String::new();
    for (decl_path, decl) in enum_decls {
        let DeclarationKind::Union(u) = &decl.kind else {
            return Err(eyre::eyre!("DeclarationKind wasn't union"));
        };
        output.push_str(&format!(
            "// impl From<VARIANT> for {}\n",
            decl_path.0.join("::")
        ));

        for variant in u.variants.keys() {
            let from_t = [&decl_path.0[..decl_path.0.len() - 1], &[variant.clone()]]
                .concat()
                .join("::");
            let for_t = decl_path.0.join("::");
            #[rustfmt::skip]
            output.push_str(&format!(
                "impl From<{from_t}> for {for_t} {{\
                    fn from(value: {from_t}) -> Self {{\
                        Self::{variant}(::std::boxed::Box::new(value))\
                    }}\
                }}\n", // /*{decl_path:#?}*/\n/*{decl:#?}*/
            ));
        }
    }
    Ok(output)
}
